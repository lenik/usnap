
- 有时用不同的语法来描述相同的事物。
  这种不同性可以分为若干大类，把分类后的不同划分为不同的语法形式，这样就可以对
  语法进行更有效的组织了。
  另一个好处就在于分类后的语法可以在高层次对其约束、转换。

- 前面已经出现的树形结构有



  根据 g.obj 定义，其中部分树形结构将分为两类，一为静态描述，而为动态生成树。

  语法形式树(GFT)是GD的另一个层次，它没有显然动态结构，而且在一般情况下，需要在
  分析之前给出明确的采用何种语法形式，或者指出语法转换的目标语法形式。

  一般转换语法指明的语法形式都比较外层，如果转换内曾语法直接通过命令行可能会比
  较困难。在HAS设计中则可以直接对选中的内部语法形式进行。

  比如考虑泛义的计算机语言L1, L2，其中描述表达式的有表达式语言 E1, E2, E3，其中
	L1 采用 E1
	L2 采用 E2
	其它一些偏僻的语言则采用 E3
	而假设每种语言都支持所有三种表达式（需要显示表示）
  现在可以通过GFT直接将 L1 的 gi 转换至 L2，或将 L2 的 gi 转换成 L1，比如：
      ' translate_L1_to_L2 input.l1 output.l2 '
  这是一种外层转换，如果希望将 L1 的 gi 中所有 E1 表达式转换至 E2，那么这就是一
  种内层转换。


- 符号混乱

	- 在一般语法中（如未指定[flex]等面向正则文本文法的特殊语法）必须用引号
	  将各种字符串包围起来。以便有大量符号可以利用。
	  除了ASCII之外也可以通过ASCII换码来补充大量符号，补充的符号需要和
	  Unicode、UTF-8等具有一定程度兼容。
	  令\&为换码，定义如下符号以及替代
		\&

	- # 特殊注释包括 x@a 注释层嵌入扩展，有时需要一种更细的嵌入，而不是单行
	  式的。这个可以通过 { } 来完成，没有 { } 的按行末断字处理，可以用 \ 来
	  续行以与 C 兼容。有些可以跨行的按通常文法分析。


	-
-
// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// C++ TLBWRTR : $Revision: 1.1 $
// File generated on 2003-9-2 14:18:13 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\s_prjs\Data Rescuer\modules\HDR_Controls\HDR_Controls.tlb (1)
// LIBID: {2A321C0E-AF3F-4B5E-8464-214067AF08B3}
// LCID: 0
// Helpfile:
// HelpString: Hard disk Data Rescuer - Controls
// DepndLst:
//   (1) v2.0 stdole, (C:\WINDOWS\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   HDR_Controls_TLBH
#define   HDR_Controls_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include "OleCtrls.hpp"

// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Hdr_controls_tlb
{

// *********************************************************************//
// HelpString: Hard disk Data Rescuer - Controls
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_HDR_Controls = {0x2A321C0E, 0xAF3F, 0x4B5E,{ 0x84, 0x64, 0x21,0x40, 0x67, 0xAF,0x08, 0xB3} };
extern "C" const __declspec(selectany) GUID IID_ISmallHexEdit = {0x8BC8C20B, 0xAA26, 0x49D8,{ 0x94, 0xB4, 0xDA,0x2A, 0x1C, 0x51,0xAB, 0x0E} };
extern "C" const __declspec(selectany) GUID DIID_ISmallHexEditEvents = {0xBD760A84, 0xB224, 0x427B,{ 0x8E, 0x05, 0xE8,0xE9, 0x2E, 0x0D,0x8F, 0xDE} };
extern "C" const __declspec(selectany) GUID CLSID_SmallHexEdit = {0xD7B8F218, 0x8E5E, 0x44F3,{ 0x80, 0x96, 0x24,0x04, 0x0F, 0x1A,0x2C, 0xFC} };
extern "C" const __declspec(selectany) GUID GUID_TxActiveFormBorderStyle = {0x82CBC473, 0x4E96, 0x4932,{ 0x89, 0xEA, 0xA5,0xED, 0xD8, 0x84,0x3B, 0xF2} };
extern "C" const __declspec(selectany) GUID GUID_TxPrintScale = {0xAF656F9D, 0x71F5, 0x41BF,{ 0x82, 0x31, 0x40,0x63, 0x79, 0x18,0xF9, 0x7E} };
extern "C" const __declspec(selectany) GUID GUID_TxMouseButton = {0x7911DF29, 0xDF61, 0x4AA5,{ 0x83, 0x9B, 0xA9,0x15, 0x12, 0x49,0x17, 0x4C} };
extern "C" const __declspec(selectany) GUID IID_IHDPosition = {0xBED64A62, 0xB0BB, 0x4194,{ 0xBA, 0x3C, 0xDD,0xA1, 0xE5, 0x20,0x84, 0x0F} };
extern "C" const __declspec(selectany) GUID DIID_IHDPositionEvents = {0xE9977454, 0xBAC1, 0x4720,{ 0xBC, 0xBE, 0x0D,0x4B, 0x5E, 0x2B,0x98, 0x0F} };
extern "C" const __declspec(selectany) GUID CLSID_HDPosition = {0x0212A35B, 0x6C24, 0x4827,{ 0x81, 0x8D, 0x1B,0x69, 0x59, 0x97,0x84, 0x3D} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
enum      TxActiveFormBorderStyle;
enum      TxPrintScale;
enum      TxMouseButton;
interface DECLSPEC_UUID("{8BC8C20B-AA26-49D8-94B4-DA2A1C51AB0E}") ISmallHexEdit;
typedef TComInterface<ISmallHexEdit, &IID_ISmallHexEdit> ISmallHexEditPtr;

interface DECLSPEC_UUID("{BD760A84-B224-427B-8E05-E8E92E0D8FDE}") ISmallHexEditEvents;
typedef TComInterface<ISmallHexEditEvents, &DIID_ISmallHexEditEvents> ISmallHexEditEventsPtr;

interface DECLSPEC_UUID("{BED64A62-B0BB-4194-BA3C-DDA1E520840F}") IHDPosition;
typedef TComInterface<IHDPosition, &IID_IHDPosition> IHDPositionPtr;

interface DECLSPEC_UUID("{E9977454-BAC1-4720-BCBE-0D4B5E2B980F}") IHDPositionEvents;
typedef TComInterface<IHDPositionEvents, &DIID_IHDPositionEvents> IHDPositionEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef ISmallHexEdit SmallHexEdit;
typedef ISmallHexEditPtr SmallHexEditPtr;
typedef IHDPosition HDPosition;
typedef IHDPositionPtr HDPositionPtr;

#define LIBID_OF_SmallHexEdit (&LIBID_HDR_Controls)
#define LIBID_OF_HDPosition (&LIBID_HDR_Controls)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library
// *********************************************************************//
typedef enum TxActiveFormBorderStyle
{
  afbNone = 0,
  afbSingle = 1,
  afbSunken = 2,
  afbRaised = 3
} TxActiveFormBorderStyle;

typedef enum TxPrintScale
{
  poNone = 0,
  poProportional = 1,
  poPrintToFit = 2
} TxPrintScale;

typedef enum TxMouseButton
{
  mbLeft = 0,
  mbRight = 1,
  mbMiddle = 2
} TxMouseButton;

// *********************************************************************//
// Interface: ISmallHexEdit
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BC8C20B-AA26-49D8-94B4-DA2A1C51AB0E}
// *********************************************************************//
interface ISmallHexEdit  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_AutoScroll(VARIANT_BOOL Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Value/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Value/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_KeyPreview(VARIANT_BOOL Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_PixelsPerInch(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_PixelsPerInch(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Scaled(VARIANT_BOOL Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  virtual HRESULT STDMETHODCALLTYPE get_BinaryPointer(long* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_Length(long* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_AsiaSupport(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_AsiaSupport(VARIANT_BOOL Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(int* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Rows(int Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(int* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_Columns(int Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Dirty(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE SetBinary(void* BinaryPointer/*[in]*/, long Length/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_LeftMargin(int* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_LeftMargin(int Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_TopMargin(int* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_TopMargin(int Value/*[in]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoScroll(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
    return Value;
  }

  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void)
  {
    Hdr_controls_tlb::TxActiveFormBorderStyle Value;
    OLECHECK(this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value));
    return Value;
  }

  long __fastcall get_BorderWidth(void)
  {
    long Value;
    OLECHECK(this->get_BorderWidth((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Caption((BSTR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* Value;
    OLECHECK(this->get_Font((IFontDisp**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_KeyPreview(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_PixelsPerInch(void)
  {
    long Value;
    OLECHECK(this->get_PixelsPerInch((long*)&Value));
    return Value;
  }

  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void)
  {
    Hdr_controls_tlb::TxPrintScale Value;
    OLECHECK(this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Scaled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_BinaryPointer(void)
  {
    long Value;
    OLECHECK(this->get_BinaryPointer((long*)&Value));
    return Value;
  }

  long __fastcall get_Length(void)
  {
    long Value;
    OLECHECK(this->get_Length((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AsiaSupport(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AsiaSupport((VARIANT_BOOL*)&Value));
    return Value;
  }

  int __fastcall get_Rows(void)
  {
    int Value;
    OLECHECK(this->get_Rows((int*)&Value));
    return Value;
  }

  int __fastcall get_Columns(void)
  {
    int Value;
    OLECHECK(this->get_Columns((int*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Dirty(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Dirty((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ReadOnly(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&Value));
    return Value;
  }

  int __fastcall get_LeftMargin(void)
  {
    int Value;
    OLECHECK(this->get_LeftMargin((int*)&Value));
    return Value;
  }

  int __fastcall get_TopMargin(void)
  {
    int Value;
    OLECHECK(this->get_TopMargin((int*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            BinaryPointer = {read = get_BinaryPointer};
  __property   long            Length = {read = get_Length};
  __property   VARIANT_BOOL    AsiaSupport = {read = get_AsiaSupport, write = set_AsiaSupport};
  __property   int             Rows = {read = get_Rows, write = set_Rows};
  __property   int             Columns = {read = get_Columns, write = set_Columns};
  __property   VARIANT_BOOL    Dirty = {read = get_Dirty};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   int             LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   int             TopMargin = {read = get_TopMargin, write = set_TopMargin};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISmallHexEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {BD760A84-B224-427B-8E05-E8E92E0D8FDE}
// *********************************************************************//
interface ISmallHexEditEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall OnDestroy()
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall OnDeactivate()
  {
    _TDispID _dispid(/* OnDeactivate */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall OnPaint()
  {
    _TDispID _dispid(/* OnPaint */ DISPID(16));
    OleProcedure(_dispid);
  }

  HRESULT __fastcall OnPassBOF(VARIANT_BOOL* Wrap/*[out,retval]*/)
  {
    _TDispID _dispid(/* OnPassBOF */ DISPID(17));
    TAutoArgs<0> _args;
    return OutRetValSetterPtr(Wrap /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
  }

  VARIANT_BOOL __fastcall OnPassBOF(void)
  {
    VARIANT_BOOL Wrap;
    this->OnPassBOF((VARIANT_BOOL*)&Wrap);
    return Wrap;
  }

  HRESULT __fastcall OnPassEOF(VARIANT_BOOL* Wrap/*[out,retval]*/)
  {
    _TDispID _dispid(/* OnPassEOF */ DISPID(18));
    TAutoArgs<0> _args;
    return OutRetValSetterPtr(Wrap /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
  }

  VARIANT_BOOL __fastcall OnPassEOF(void)
  {
    VARIANT_BOOL Wrap;
    this->OnPassEOF((VARIANT_BOOL*)&Wrap);
    return Wrap;
  }

  HRESULT __fastcall OnModified()
  {
    _TDispID _dispid(/* OnModified */ DISPID(19));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IHDPosition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BED64A62-B0BB-4194-BA3C-DDA1E520840F}
// *********************************************************************//
interface IHDPosition  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_AutoScroll(VARIANT_BOOL Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Value/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Value/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_KeyPreview(VARIANT_BOOL Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_PixelsPerInch(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_PixelsPerInch(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Scaled(VARIANT_BOOL Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DropTarget(VARIANT_BOOL Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoScroll(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
    return Value;
  }

  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void)
  {
    Hdr_controls_tlb::TxActiveFormBorderStyle Value;
    OLECHECK(this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value));
    return Value;
  }

  long __fastcall get_BorderWidth(void)
  {
    long Value;
    OLECHECK(this->get_BorderWidth((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Caption((BSTR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* Value;
    OLECHECK(this->get_Font((IFontDisp**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_KeyPreview(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_PixelsPerInch(void)
  {
    long Value;
    OLECHECK(this->get_PixelsPerInch((long*)&Value));
    return Value;
  }

  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void)
  {
    Hdr_controls_tlb::TxPrintScale Value;
    OLECHECK(this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Scaled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DropTarget(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
    return Value;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DoubleBuffered(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IHDPositionEvents
// Flags:     (0)
// GUID:      {E9977454-BAC1-4720-BCBE-0D4B5E2B980F}
// *********************************************************************//
interface IHDPositionEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall OnCreate()
  {
    _TDispID _dispid(/* OnCreate */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall OnDblClick()
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall OnDestroy()
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall OnDeactivate()
  {
    _TDispID _dispid(/* OnDeactivate */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall OnKeyPress(short* Key/*[in,out]*/)
  {
    _TDispID _dispid(/* OnKeyPress */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Key /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnPaint()
  {
    _TDispID _dispid(/* OnPaint */ DISPID(16));
    OleProcedure(_dispid);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMISmallHexEdit
// Interface: ISmallHexEdit
// *********************************************************************//
template <class T /* ISmallHexEdit */ >
class TCOMISmallHexEditT : public TComInterface<ISmallHexEdit>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISmallHexEditT() {}
  TCOMISmallHexEditT(ISmallHexEdit *intf, bool addRef = false) : TComInterface<ISmallHexEdit>(intf, addRef) {}
  TCOMISmallHexEditT(const TCOMISmallHexEditT& src) : TComInterface<ISmallHexEdit>(src) {}
  TCOMISmallHexEditT& operator=(const TCOMISmallHexEditT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoScroll(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_KeyPreview(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Scaled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Scaled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Active(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Active(void);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall get_BinaryPointer(long* Value/*[out,retval]*/);
  long            __fastcall get_BinaryPointer(void);
  HRESULT         __fastcall get_Length(long* Value/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT         __fastcall get_AsiaSupport(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AsiaSupport(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AsiaSupport(void);
  HRESULT         __fastcall set_AsiaSupport(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AsiaSupport(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Rows(int* Value/*[out,retval]*/);
  int             __fastcall get_Rows(void);
  HRESULT         __fastcall set_Rows(int Value/*[in]*/);
  HRESULT         __fastcall get_Columns(int* Value/*[out,retval]*/);
  int             __fastcall get_Columns(void);
  HRESULT         __fastcall set_Columns(int Value/*[in]*/);
  HRESULT         __fastcall get_Dirty(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Dirty(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_ReadOnly(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_ReadOnly(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall SetBinary(void* BinaryPointer/*[in]*/, long Length/*[in]*/);
  HRESULT         __fastcall get_LeftMargin(int* Value/*[out,retval]*/);
  int             __fastcall get_LeftMargin(void);
  HRESULT         __fastcall set_LeftMargin(int Value/*[in]*/);
  HRESULT         __fastcall get_TopMargin(int* Value/*[out,retval]*/);
  int             __fastcall get_TopMargin(void);
  HRESULT         __fastcall set_TopMargin(int Value/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   TOLEBOOL        AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   TOLEBOOL        Scaled = {read = get_Scaled, write = set_Scaled};
  __property   TOLEBOOL        Active = {read = get_Active};
  __property   TOLEBOOL        AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            BinaryPointer = {read = get_BinaryPointer};
  __property   long            Length = {read = get_Length};
  __property   TOLEBOOL        AsiaSupport = {read = get_AsiaSupport, write = set_AsiaSupport};
  __property   int             Rows = {read = get_Rows, write = set_Rows};
  __property   int             Columns = {read = get_Columns, write = set_Columns};
  __property   TOLEBOOL        Dirty = {read = get_Dirty};
  __property   TOLEBOOL        ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   int             LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   int             TopMargin = {read = get_TopMargin, write = set_TopMargin};
};
typedef TCOMISmallHexEditT<ISmallHexEdit> TCOMISmallHexEdit;

// *********************************************************************//
// DispIntf:  ISmallHexEdit
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BC8C20B-AA26-49D8-94B4-DA2A1C51AB0E}
// *********************************************************************//
template<class T>
class ISmallHexEditDispT : public TAutoDriver<ISmallHexEdit>
{
public:
  ISmallHexEditDispT(){}

  ISmallHexEditDispT(ISmallHexEdit *pintf)
  {
    TAutoDriver<ISmallHexEdit>::Bind(pintf, false);
  }

  ISmallHexEditDispT(ISmallHexEditPtr pintf)
  {
    TAutoDriver<ISmallHexEdit>::Bind(pintf, true);
  }

  ISmallHexEditDispT& operator=(ISmallHexEdit *pintf)
  {
    TAutoDriver<ISmallHexEdit>::Bind(pintf, false);
    return *this;
  }

  ISmallHexEditDispT& operator=(ISmallHexEditPtr pintf)
  {
    TAutoDriver<ISmallHexEdit>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SmallHexEdit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SmallHexEdit);
  }

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall get_BinaryPointer(long* Value/*[out,retval]*/);
  long            __fastcall get_BinaryPointer(void);
  HRESULT         __fastcall get_Length(long* Value/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT         __fastcall get_AsiaSupport(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsiaSupport(void);
  HRESULT         __fastcall set_AsiaSupport(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Rows(int* Value/*[out,retval]*/);
  int             __fastcall get_Rows(void);
  HRESULT         __fastcall set_Rows(int Value/*[in]*/);
  HRESULT         __fastcall get_Columns(int* Value/*[out,retval]*/);
  int             __fastcall get_Columns(void);
  HRESULT         __fastcall set_Columns(int Value/*[in]*/);
  HRESULT         __fastcall get_Dirty(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dirty(void);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall SetBinary(/*AUTO_PARAM_ERROR(void* BinaryPointer)*/ TVariant&  BinaryPointer
                                       , long Length/*[in]*/);
  HRESULT         __fastcall get_LeftMargin(int* Value/*[out,retval]*/);
  int             __fastcall get_LeftMargin(void);
  HRESULT         __fastcall set_LeftMargin(int Value/*[in]*/);
  HRESULT         __fastcall get_TopMargin(int* Value/*[out,retval]*/);
  int             __fastcall get_TopMargin(void);
  HRESULT         __fastcall set_TopMargin(int Value/*[in]*/);

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            BinaryPointer = {read = get_BinaryPointer};
  __property   long            Length = {read = get_Length};
  __property   VARIANT_BOOL    AsiaSupport = {read = get_AsiaSupport, write = set_AsiaSupport};
  __property   int             Rows = {read = get_Rows, write = set_Rows};
  __property   int             Columns = {read = get_Columns, write = set_Columns};
  __property   VARIANT_BOOL    Dirty = {read = get_Dirty};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   int             LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
  __property   int             TopMargin = {read = get_TopMargin, write = set_TopMargin};
};
typedef ISmallHexEditDispT<ISmallHexEdit> ISmallHexEditDisp;

// *********************************************************************//
// DispIntf:  ISmallHexEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {BD760A84-B224-427B-8E05-E8E92E0D8FDE}
// *********************************************************************//
template <class T>
class ISmallHexEditEventsDispT : public TAutoDriver<ISmallHexEditEvents>
{
public:
  ISmallHexEditEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnActivate();
  void            __fastcall OnClick();
  void            __fastcall OnDestroy();
  void            __fastcall OnDeactivate();
  void            __fastcall OnPaint();
  HRESULT         __fastcall OnPassBOF(VARIANT_BOOL* Wrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall OnPassBOF(void);
  HRESULT         __fastcall OnPassEOF(VARIANT_BOOL* Wrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall OnPassEOF(void);
  HRESULT         __fastcall OnModified();

};
typedef ISmallHexEditEventsDispT<ISmallHexEditEvents> ISmallHexEditEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIHDPosition
// Interface: IHDPosition
// *********************************************************************//
template <class T /* IHDPosition */ >
class TCOMIHDPositionT : public TComInterface<IHDPosition>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIHDPositionT() {}
  TCOMIHDPositionT(IHDPosition *intf, bool addRef = false) : TComInterface<IHDPosition>(intf, addRef) {}
  TCOMIHDPositionT(const TCOMIHDPositionT& src) : TComInterface<IHDPosition>(src) {}
  TCOMIHDPositionT& operator=(const TCOMIHDPositionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoScroll(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_KeyPreview(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Scaled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Scaled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Active(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DropTarget(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DropTarget(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DoubleBuffered(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Value/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   TOLEBOOL        AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   TOLEBOOL        Scaled = {read = get_Scaled, write = set_Scaled};
  __property   TOLEBOOL        Active = {read = get_Active};
  __property   TOLEBOOL        DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   TOLEBOOL        DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   TOLEBOOL        AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef TCOMIHDPositionT<IHDPosition> TCOMIHDPosition;

// *********************************************************************//
// DispIntf:  IHDPosition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BED64A62-B0BB-4194-BA3C-DDA1E520840F}
// *********************************************************************//
template<class T>
class IHDPositionDispT : public TAutoDriver<IHDPosition>
{
public:
  IHDPositionDispT(){}

  IHDPositionDispT(IHDPosition *pintf)
  {
    TAutoDriver<IHDPosition>::Bind(pintf, false);
  }

  IHDPositionDispT(IHDPositionPtr pintf)
  {
    TAutoDriver<IHDPosition>::Bind(pintf, true);
  }

  IHDPositionDispT& operator=(IHDPosition *pintf)
  {
    TAutoDriver<IHDPosition>::Bind(pintf, false);
    return *this;
  }

  IHDPositionDispT& operator=(IHDPositionPtr pintf)
  {
    TAutoDriver<IHDPosition>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HDPosition));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HDPosition);
  }

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/);
  Hdr_controls_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Hdr_controls_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Hdr_controls_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef IHDPositionDispT<IHDPosition> IHDPositionDisp;

// *********************************************************************//
// DispIntf:  IHDPositionEvents
// Flags:     (0)
// GUID:      {E9977454-BAC1-4720-BCBE-0D4B5E2B980F}
// *********************************************************************//
template <class T>
class IHDPositionEventsDispT : public TAutoDriver<IHDPositionEvents>
{
public:
  IHDPositionEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnActivate();
  void            __fastcall OnClick();
  void            __fastcall OnCreate();
  void            __fastcall OnDblClick();
  void            __fastcall OnDestroy();
  void            __fastcall OnDeactivate();
  void            __fastcall OnKeyPress(short* Key/*[in,out]*/);
  void            __fastcall OnPaint();

};
typedef IHDPositionEventsDispT<IHDPositionEvents> IHDPositionEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMISmallHexEdit
// Interface: ISmallHexEdit
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Visible(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Visible(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AutoScroll(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AutoSize(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AutoSize(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  return (*this)->get_AxBorderStyle(Value);
}

template <class T> Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall
TCOMISmallHexEditT<T>::get_AxBorderStyle(void)
{
  Hdr_controls_tlb::TxActiveFormBorderStyle Value;
  OLECHECK(this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  return (*this)->set_AxBorderStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(Value);
}

template <class T> long __fastcall
TCOMISmallHexEditT<T>::get_BorderWidth(void)
{
  long Value;
  OLECHECK(this->get_BorderWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_BorderWidth(long Value/*[in]*/)
{
  return (*this)->set_BorderWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Caption(Value);
}

template <class T> BSTR __fastcall
TCOMISmallHexEditT<T>::get_Caption(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Caption((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Caption(BSTR Value/*[in]*/)
{
  return (*this)->set_Caption(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMISmallHexEditT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDisp* __fastcall
TCOMISmallHexEditT<T>::get_Font(void)
{
  IFontDisp* Value;
  OLECHECK(this->get_Font((IFontDisp**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_KeyPreview(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  return (*this)->get_PixelsPerInch(Value);
}

template <class T> long __fastcall
TCOMISmallHexEditT<T>::get_PixelsPerInch(void)
{
  long Value;
  OLECHECK(this->get_PixelsPerInch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  return (*this)->set_PixelsPerInch(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  return (*this)->get_PrintScale(Value);
}

template <class T> Hdr_controls_tlb::TxPrintScale __fastcall
TCOMISmallHexEditT<T>::get_PrintScale(void)
{
  Hdr_controls_tlb::TxPrintScale Value;
  OLECHECK(this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/)
{
  return (*this)->set_PrintScale(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Scaled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Scaled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Active(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMISmallHexEditT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Enabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Enabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_BinaryPointer(long* Value/*[out,retval]*/)
{
  return (*this)->get_BinaryPointer(Value);
}

template <class T> long __fastcall
TCOMISmallHexEditT<T>::get_BinaryPointer(void)
{
  long Value;
  OLECHECK(this->get_BinaryPointer((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Length(long* Value/*[out,retval]*/)
{
  return (*this)->get_Length(Value);
}

template <class T> long __fastcall
TCOMISmallHexEditT<T>::get_Length(void)
{
  long Value;
  OLECHECK(this->get_Length((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AsiaSupport(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AsiaSupport(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_AsiaSupport(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AsiaSupport(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_AsiaSupport(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AsiaSupport((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AsiaSupport(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AsiaSupport(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_AsiaSupport(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AsiaSupport(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Rows(int* Value/*[out,retval]*/)
{
  return (*this)->get_Rows(Value);
}

template <class T> int __fastcall
TCOMISmallHexEditT<T>::get_Rows(void)
{
  int Value;
  OLECHECK(this->get_Rows((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Rows(int Value/*[in]*/)
{
  return (*this)->set_Rows(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Columns(int* Value/*[out,retval]*/)
{
  return (*this)->get_Columns(Value);
}

template <class T> int __fastcall
TCOMISmallHexEditT<T>::get_Columns(void)
{
  int Value;
  OLECHECK(this->get_Columns((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_Columns(int Value/*[in]*/)
{
  return (*this)->set_Columns(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Dirty(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Dirty(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_Dirty(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Dirty(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_Dirty(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Dirty((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_ReadOnly(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMISmallHexEditT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_ReadOnly(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ReadOnly(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_ReadOnly(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_ReadOnly(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::SetBinary(void* BinaryPointer/*[in]*/, long Length/*[in]*/)
{
  return (*this)->SetBinary(BinaryPointer, Length);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_LeftMargin(int* Value/*[out,retval]*/)
{
  return (*this)->get_LeftMargin(Value);
}

template <class T> int __fastcall
TCOMISmallHexEditT<T>::get_LeftMargin(void)
{
  int Value;
  OLECHECK(this->get_LeftMargin((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_LeftMargin(int Value/*[in]*/)
{
  return (*this)->set_LeftMargin(Value);
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::get_TopMargin(int* Value/*[out,retval]*/)
{
  return (*this)->get_TopMargin(Value);
}

template <class T> int __fastcall
TCOMISmallHexEditT<T>::get_TopMargin(void)
{
  int Value;
  OLECHECK(this->get_TopMargin((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISmallHexEditT<T>::set_TopMargin(int Value/*[in]*/)
{
  return (*this)->set_TopMargin(Value);
}

// *********************************************************************//
// DispIntf:  ISmallHexEdit
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8BC8C20B-AA26-49D8-94B4-DA2A1C51AB0E}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  this->get_AutoScroll((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall
ISmallHexEditDispT<T>::get_AxBorderStyle(void)
{
  Hdr_controls_tlb::TxActiveFormBorderStyle Value;
  this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmallHexEditDispT<T>::get_BorderWidth(void)
{
  long Value;
  this->get_BorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_BorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISmallHexEditDispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
ISmallHexEditDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
ISmallHexEditDispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  this->get_KeyPreview((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmallHexEditDispT<T>::get_PixelsPerInch(void)
{
  long Value;
  this->get_PixelsPerInch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Hdr_controls_tlb::TxPrintScale __fastcall
ISmallHexEditDispT<T>::get_PrintScale(void)
{
  Hdr_controls_tlb::TxPrintScale Value;
  this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  this->get_Scaled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmallHexEditDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_BinaryPointer(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BinaryPointer"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmallHexEditDispT<T>::get_BinaryPointer(void)
{
  long Value;
  this->get_BinaryPointer((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Length(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISmallHexEditDispT<T>::get_Length(void)
{
  long Value;
  this->get_Length((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_AsiaSupport(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsiaSupport"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_AsiaSupport(void)
{
  VARIANT_BOOL Value;
  this->get_AsiaSupport((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_AsiaSupport(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsiaSupport"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Rows(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISmallHexEditDispT<T>::get_Rows(void)
{
  int Value;
  this->get_Rows((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Rows(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Columns(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISmallHexEditDispT<T>::get_Columns(void)
{
  int Value;
  this->get_Columns((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_Columns(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_Dirty(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_Dirty(void)
{
  VARIANT_BOOL Value;
  this->get_Dirty((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL Value;
  this->get_ReadOnly((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_ReadOnly(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::SetBinary(/*AUTO_PARAM_ERROR(void* BinaryPointer)*/ TVariant&  BinaryPointer
                                 , long Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetBinary"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = BinaryPointer /*[VT_VOID:1]*/;
  _args[2] = Length /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_LeftMargin(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISmallHexEditDispT<T>::get_LeftMargin(void)
{
  int Value;
  this->get_LeftMargin((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_LeftMargin(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::get_TopMargin(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopMargin"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISmallHexEditDispT<T>::get_TopMargin(void)
{
  int Value;
  this->get_TopMargin((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISmallHexEditDispT<T>::set_TopMargin(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopMargin"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISmallHexEditEvents
// Flags:     (4096) Dispatchable
// GUID:      {BD760A84-B224-427B-8E05-E8E92E0D8FDE}
// *********************************************************************//
template <class T> void __fastcall
ISmallHexEditEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ISmallHexEditEventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ISmallHexEditEventsDispT<T>::OnDestroy()
{
  _TDispID _dispid(/* OnDestroy */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ISmallHexEditEventsDispT<T>::OnDeactivate()
{
  _TDispID _dispid(/* OnDeactivate */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ISmallHexEditEventsDispT<T>::OnPaint()
{
  _TDispID _dispid(/* OnPaint */ DISPID(16));
  OleProcedure(_dispid);
}

template <class T> HRESULT __fastcall
ISmallHexEditEventsDispT<T>::OnPassBOF(VARIANT_BOOL* Wrap/*[out,retval]*/)
{
  _TDispID _dispid(/* OnPassBOF */ DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Wrap /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditEventsDispT<T>::OnPassBOF(void)
{
  VARIANT_BOOL Wrap;
  this->OnPassBOF((VARIANT_BOOL*)&Wrap);
  return Wrap;
}

template <class T> HRESULT __fastcall
ISmallHexEditEventsDispT<T>::OnPassEOF(VARIANT_BOOL* Wrap/*[out,retval]*/)
{
  _TDispID _dispid(/* OnPassEOF */ DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Wrap /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISmallHexEditEventsDispT<T>::OnPassEOF(void)
{
  VARIANT_BOOL Wrap;
  this->OnPassEOF((VARIANT_BOOL*)&Wrap);
  return Wrap;
}

template <class T> HRESULT __fastcall
ISmallHexEditEventsDispT<T>::OnModified()
{
  _TDispID _dispid(/* OnModified */ DISPID(19));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIHDPosition
// Interface: IHDPosition
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Visible(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Visible(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_AutoScroll(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AutoSize(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_AutoSize(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  return (*this)->get_AxBorderStyle(Value);
}

template <class T> Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall
TCOMIHDPositionT<T>::get_AxBorderStyle(void)
{
  Hdr_controls_tlb::TxActiveFormBorderStyle Value;
  OLECHECK(this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  return (*this)->set_AxBorderStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(Value);
}

template <class T> long __fastcall
TCOMIHDPositionT<T>::get_BorderWidth(void)
{
  long Value;
  OLECHECK(this->get_BorderWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_BorderWidth(long Value/*[in]*/)
{
  return (*this)->set_BorderWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Caption(Value);
}

template <class T> BSTR __fastcall
TCOMIHDPositionT<T>::get_Caption(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Caption((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Caption(BSTR Value/*[in]*/)
{
  return (*this)->set_Caption(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIHDPositionT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDisp* __fastcall
TCOMIHDPositionT<T>::get_Font(void)
{
  IFontDisp* Value;
  OLECHECK(this->get_Font((IFontDisp**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_KeyPreview(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  return (*this)->get_PixelsPerInch(Value);
}

template <class T> long __fastcall
TCOMIHDPositionT<T>::get_PixelsPerInch(void)
{
  long Value;
  OLECHECK(this->get_PixelsPerInch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  return (*this)->set_PixelsPerInch(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  return (*this)->get_PrintScale(Value);
}

template <class T> Hdr_controls_tlb::TxPrintScale __fastcall
TCOMIHDPositionT<T>::get_PrintScale(void)
{
  Hdr_controls_tlb::TxPrintScale Value;
  OLECHECK(this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/)
{
  return (*this)->set_PrintScale(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Scaled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Scaled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Active(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_DropTarget(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_DropTarget(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_HelpFile(Value);
}

template <class T> BSTR __fastcall
TCOMIHDPositionT<T>::get_HelpFile(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  return (*this)->set_HelpFile(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_DoubleBuffered(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMIHDPositionT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::get_Enabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIHDPositionT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIHDPositionT<T>::set_Enabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Value);
}

// *********************************************************************//
// DispIntf:  IHDPosition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BED64A62-B0BB-4194-BA3C-DDA1E520840F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  this->get_AutoScroll((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Hdr_controls_tlb::TxActiveFormBorderStyle __fastcall
IHDPositionDispT<T>::get_AxBorderStyle(void)
{
  Hdr_controls_tlb::TxActiveFormBorderStyle Value;
  this->get_AxBorderStyle((Hdr_controls_tlb::TxActiveFormBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_AxBorderStyle(Hdr_controls_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHDPositionDispT<T>::get_BorderWidth(void)
{
  long Value;
  this->get_BorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_BorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHDPositionDispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IHDPositionDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IHDPositionDispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  this->get_KeyPreview((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHDPositionDispT<T>::get_PixelsPerInch(void)
{
  long Value;
  this->get_PixelsPerInch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_PrintScale(Hdr_controls_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Hdr_controls_tlb::TxPrintScale __fastcall
IHDPositionDispT<T>::get_PrintScale(void)
{
  Hdr_controls_tlb::TxPrintScale Value;
  this->get_PrintScale((Hdr_controls_tlb::TxPrintScale*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_PrintScale(Hdr_controls_tlb::TxPrintScale Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  this->get_Scaled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  this->get_DropTarget((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHDPositionDispT<T>::get_HelpFile(void)
{
  BSTR Value;
  this->get_HelpFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHDPositionDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IHDPositionDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IHDPositionDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IHDPositionEvents
// Flags:     (0)
// GUID:      {E9977454-BAC1-4720-BCBE-0D4B5E2B980F}
// *********************************************************************//
template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnCreate()
{
  _TDispID _dispid(/* OnCreate */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnDblClick()
{
  _TDispID _dispid(/* OnDblClick */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnDestroy()
{
  _TDispID _dispid(/* OnDestroy */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnDeactivate()
{
  _TDispID _dispid(/* OnDeactivate */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnKeyPress(short* Key/*[in,out]*/)
{
  _TDispID _dispid(/* OnKeyPress */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IHDPositionEventsDispT<T>::OnPaint()
{
  _TDispID _dispid(/* OnPaint */ DISPID(16));
  OleProcedure(_dispid);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SmallHexEdit
// Event Interface : ISmallHexEditEvents
// *********************************************************************//
template <class T>
class TEvents_SmallHexEdit : public IConnectionPointImpl<T,
                                                 &DIID_ISmallHexEditEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnActivate(void);
  void            Fire_OnClick(void);
  void            Fire_OnDestroy(void);
  void            Fire_OnDeactivate(void);
  void            Fire_OnPaint(void);
  HRESULT         Fire_OnPassBOF(VARIANT_BOOL* Wrap);
  HRESULT         Fire_OnPassEOF(VARIANT_BOOL* Wrap);
  HRESULT         Fire_OnModified(void);
protected:
  ISmallHexEditEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_SmallHexEdit<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SmallHexEdit<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SmallHexEdit<T>::Fire_OnDestroy(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SmallHexEdit<T>::Fire_OnDeactivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDeactivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SmallHexEdit<T>::Fire_OnPaint(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPaint();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_SmallHexEdit<T>::Fire_OnPassBOF(VARIANT_BOOL* Wrap)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPassBOF(Wrap);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_SmallHexEdit<T>::Fire_OnPassEOF(VARIANT_BOOL* Wrap)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPassEOF(Wrap);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_SmallHexEdit<T>::Fire_OnModified(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnModified();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HDPosition
// Event Interface : IHDPositionEvents
// *********************************************************************//
template <class T>
class TEvents_HDPosition : public IConnectionPointImpl<T,
                                                 &DIID_IHDPositionEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnActivate(void);
  void            Fire_OnClick(void);
  void            Fire_OnCreate(void);
  void            Fire_OnDblClick(void);
  void            Fire_OnDestroy(void);
  void            Fire_OnDeactivate(void);
  void            Fire_OnKeyPress(short* Key);
  void            Fire_OnPaint(void);
protected:
  IHDPositionEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_HDPosition<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnCreate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCreate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnDblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnDestroy(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnDeactivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDeactivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnKeyPress(short* Key)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyPress(Key);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_HDPosition<T>::Fire_OnPaint(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPaint();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Hdr_controls_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Hdr_controls_tlb;
#endif

#pragma option pop

#endif // HDR_Controls_TLBH

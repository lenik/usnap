// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "range.h"

// Dispatch interfaces referenced by this interface
#include "borders.h"
#include "owcfont.h"
#include "Hyperlink.h"
#include "nterior.h"
#include "Worksheet.h"


/////////////////////////////////////////////////////////////////////////////
// CRange properties

/////////////////////////////////////////////////////////////////////////////
// CRange operations

void CRange::AutoFilter()
{
	InvokeHelper(0x60020000, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::AutoFitColumns()
{
	InvokeHelper(0x60020001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::AutoFitRows()
{
	InvokeHelper(0x60020002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::Clear()
{
	InvokeHelper(0x60020003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::ClearFormats()
{
	InvokeHelper(0x60020004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::ClearContents()
{
	InvokeHelper(0x60020005, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::Copy(const VARIANT& RangeDest)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x60020006, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &RangeDest);
}

void CRange::Cut(const VARIANT& RangeDest)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x60020007, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &RangeDest);
}

void CRange::DeleteRows(long NumberOfRows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60020008, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NumberOfRows);
}

void CRange::DeleteColumns(long NumberOfColumns)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60020009, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NumberOfColumns);
}

CRange CRange::Find(const VARIANT& What, const VARIANT& After, long FindLookIn, long FindLookAt, long SearchOrder, long SearchDirection, BOOL MatchCase)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x6002000a, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		&What, &After, FindLookIn, FindLookAt, SearchOrder, SearchDirection, MatchCase);
	return CRange(pDispatch);
}

void CRange::FreezePanes(long FreezeDirection)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002000b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FreezeDirection);
}

void CRange::InsertRows(long NumberOfRows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002000c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NumberOfRows);
}

void CRange::InsertColumns(long NumberOfColumns)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002000d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NumberOfColumns);
}

void CRange::LoadText(LPCTSTR File, LPCTSTR Delimiters, BOOL ConsecutiveDelimAsOne, LPCTSTR TextQualifier)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x6002000e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 File, Delimiters, ConsecutiveDelimAsOne, TextQualifier);
}

void CRange::Merge()
{
	InvokeHelper(0x6002000f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CRange CRange::Offset(long NumberOfRows, long NumberOfColumns)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x60020010, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		NumberOfRows, NumberOfColumns);
	return CRange(pDispatch);
}

void CRange::ParseText(LPCTSTR Text, LPCTSTR Delimiters, BOOL ConsecutiveDelimAsOne, LPCTSTR TextQualifier)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x60020011, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Text, Delimiters, ConsecutiveDelimAsOne, TextQualifier);
}

void CRange::Paste()
{
	InvokeHelper(0x60020012, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::Select()
{
	InvokeHelper(0x60020013, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::Sort(long ColumnKey, long Order, long YesNoGuessHeader)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x60020014, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ColumnKey, Order, YesNoGuessHeader);
}

void CRange::Show()
{
	InvokeHelper(0x60020015, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRange::UnMerge()
{
	InvokeHelper(0x60020016, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

VARIANT CRange::Get_Default(const VARIANT& Row, const VARIANT& Column)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&Row, &Column);
	return result;
}

void CRange::Set_Default(const VARIANT& Row, const VARIANT& Column, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &Row, &Column, &newValue);
}

CString CRange::GetAddress()
{
	CString result;
	InvokeHelper(0x60020019, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CBorders CRange::GetBorders()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002001a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBorders(pDispatch);
}

CRange CRange::GetCells()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002001b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

long CRange::GetColumn()
{
	long result;
	InvokeHelper(0x6002001c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CRange CRange::GetColumns()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002001d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

VARIANT CRange::GetColumnWidth()
{
	VARIANT result;
	InvokeHelper(0x6002001e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetColumnWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002001e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CRange CRange::GetCurrentRegion()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020020, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

CRange CRange::GetEntireColumn()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020021, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

CRange CRange::GetEntireRow()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020022, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

COWCFont CRange::GetFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020023, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COWCFont(pDispatch);
}

CString CRange::GetFormula()
{
	CString result;
	InvokeHelper(0x60020024, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CRange::SetFormula(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x60020024, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CRange::GetFormulaLocal()
{
	CString result;
	InvokeHelper(0x60020026, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT CRange::GetHasFormula()
{
	VARIANT result;
	InvokeHelper(0x60020027, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long CRange::GetHeight()
{
	long result;
	InvokeHelper(0x60020028, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CRange::GetHidden()
{
	BOOL result;
	InvokeHelper(0x60020029, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CRange::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x60020029, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

VARIANT CRange::GetHAlignment()
{
	VARIANT result;
	InvokeHelper(0x6002002b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetHAlignment(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002002b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CRange::GetHTMLData()
{
	CString result;
	InvokeHelper(0x6002002d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CHyperlink CRange::GetHyperlink()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002002e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHyperlink(pDispatch);
}

Cnterior CRange::GetInterior()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002002f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return Cnterior(pDispatch);
}

CRange CRange::GetItem(const VARIANT& Row, const VARIANT& Column)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x60020030, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		&Row, &Column);
	return CRange(pDispatch);
}

long CRange::GetLeft()
{
	long result;
	InvokeHelper(0x60020031, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT CRange::GetLocked()
{
	VARIANT result;
	InvokeHelper(0x60020032, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetLocked(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x60020032, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CRange CRange::GetMergeArea()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020034, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

VARIANT CRange::GetHasMergeCells()
{
	VARIANT result;
	InvokeHelper(0x60020035, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT CRange::GetNumberFormat()
{
	VARIANT result;
	InvokeHelper(0x60020036, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetNumberFormat(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x60020036, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CWorksheet CRange::GetParent()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020038, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWorksheet(pDispatch);
}

CRange CRange::GetRange(const VARIANT& Cell1, const VARIANT& Cell2)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x60020039, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		&Cell1, &Cell2);
	return CRange(pDispatch);
}

long CRange::GetRow()
{
	long result;
	InvokeHelper(0x6002003a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT CRange::GetRowHeight()
{
	VARIANT result;
	InvokeHelper(0x6002003b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetRowHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6002003b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CRange CRange::GetRows()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6002003d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRange(pDispatch);
}

VARIANT CRange::GetText()
{
	VARIANT result;
	InvokeHelper(0x6002003e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long CRange::GetTop()
{
	long result;
	InvokeHelper(0x6002003f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT CRange::GetValue()
{
	VARIANT result;
	InvokeHelper(0x60020040, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x60020040, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT CRange::GetVAlignment()
{
	VARIANT result;
	InvokeHelper(0x60020042, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CRange::SetVAlignment(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60020042, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CRange::GetWidth()
{
	long result;
	InvokeHelper(0x60020044, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CRange::GetCount()
{
	long result;
	InvokeHelper(0x60020045, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

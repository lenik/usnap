source: IAddition 相当于 对象Tag标记，若对象-o IAddition那么就可以为对象设置自定义标记。


COM的缺点：下列方法实现麻烦：
	增加一个接口
		.IDL:	coclass { interface Interface }
		.H:	.. : public Interface
			DECLARE_INTERFACE(...)

	增加一个方法

还要给组件补上一个类型库.tlb等
	--> epfs方法，一个二进制可以根据需要，添加下列结点：
		TLB/	导出对象的信息
		DBG/	调试符号
		LIB/	导入导出函数的信息
		TXT/	说明文本
	这样，系统优化工具可以根据用户剔除无用结点。
	至少，TLB/ DBG/ LIB/ TXT/ 对于一个RELEASE系统，普通最终用户是不需要这些内容的。

从软件开放角度，HITECH应该设计另一种COM：
	HiOM
		Hi Object Modal

	1. GUID 32X:

		31-28	描述层次
		27-24	总长度(DWORD) 0: 4字节, 1: 8字节, .., E: 60字节, F: 保留

		23-0	最终ID

		层次：
		0	用户最终ID层		4
			00 123456(表示对象ID=123456)
		1	用户级目录ID层		4+4
			11 123456 00000103(表示用户程序中第103个对象系统)
		2	用户系统级目录ID层		4+4+4
			11 123456 00000103 00000023(表示用户系统中第23模块)
		3	用户跨系统级目录ID层	4+4+4+4
			11 123456 00000103 00000023 00015837(表示代号为15837的用户系统)
		8	系统级目录ID层		4+16
			11 123456 00000103-0000-0000-0000-000000000023(表示系统GUID)
			这里GUID仅代表系统中唯一标志,如果该标志对应于COM对象，那么这里最终ID=123456将无意义。

			F	保留( Hi 统一分类号 UCID )

		主要是：
			1: GUID 32X 适应于在单一体系内。比如在HIS体系内。
			2: 对于一些非常复杂的系统，比如 UFOSL，它需要的对象或目录的数目可能超出 DWORD 范围。
			对于这些，可以使用层次 F 使用 Hi.UCID。

	2. 二进制形式
		就像 依法治国 一样, 不是通过规范二进制形式, 而是规范类型库.
		有了规范类型库, 具体采用的二进制形式则可以灵活选择,可以是COM, 也可以是CORBA等。
		可以在bin.epfs中选择使用什么模型来解释二进制。

	3. HiOM的功能
		除了接口、聚合等 COM 功能外，HiOM还应该具有另一些功能。

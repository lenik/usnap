// bastype.idl : IDL source for bastype.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (bastype.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(3AD5FB90-8C80-461D-8F18-F65732FCED17),
		dual,
		helpstring("IComparable Interface"),
		pointer_default(unique)
	]
	interface IComparable : IDispatch
	{
		[id(1), helpstring("Return: -1(this < rhs), 0(this == rhs), 1(this > rhs)")]
                HRESULT compareTo([in]VARIANT *rhs, [out, retval]int *result);
	};
	[
		object,
		uuid(99A5A9D2-90B9-48A6-805F-2D14FED3238A),
		dual,
		helpstring("IStringizable Interface"),
		pointer_default(unique)
	]
	interface IStringizable : IDispatch
	{
		[id(1), helpstring("method toString")] HRESULT toString([out, retval]BSTR *result);
	};
	[
		object,
		uuid(9A64E934-FB27-4584-904D-2DFFD2D75565),
		dual,
		helpstring("IIterator Interface"),
		pointer_default(unique)
	]
	interface IIterator : IDispatch
	{
		[id(1), helpstring("method hasNext")] HRESULT hasNext([out, retval]VARIANT_BOOL *result);
		[id(2), helpstring("method fetch")] HRESULT fetch([out, retval]VARIANT *result);
		[id(3), helpstring("method remove")] HRESULT remove();
	};
	[
		object,
		uuid(C5D3407B-D364-4328-BC1A-3C4CCA631DDA),
		dual,
		helpstring("IList Interface"),
		pointer_default(unique)
	]
	interface IList : IDispatch
	{
		[propget, id(1), helpstring("property size")] HRESULT size([out, retval] long *pVal);
		[id(2), helpstring("method push")] HRESULT push([in]VARIANT *var);
		[id(3), helpstring("method pop")] HRESULT pop([out, retval]VARIANT *var);
		[id(4), helpstring("method unshift")] HRESULT unshift([in]VARIANT *var);
		[id(5), helpstring("method shift")] HRESULT shift([out, retval]VARIANT *var);
		[id(6), helpstring("method iterator")] HRESULT iterator([out, retval]IIterator **result);
	};
	[
		object,
		uuid(9583076E-91BC-4F21-8973-48EEF1BAF567),
		dual,
		helpstring("IVector Interface"),
		pointer_default(unique)
	]
	interface IVector : IList
	{
		[propget, id(0), helpstring("property item")] HRESULT item([in]long index, [out, retval] VARIANT *pVal);
		[propput, id(0), helpstring("property item")] HRESULT item([in]long index, [in] VARIANT *newVal);
		[id(8), helpstring("method insert")] HRESULT insert([in]long index, [in]VARIANT *var);
		[id(9), helpstring("method remove")] HRESULT remove([in]long index);
	};

[
	uuid(A2C5D7B2-5074-4051-829C-054554A52194),
	version(1.0),
	helpstring("Visual Basic 6.0 Basic Types for Object-Oriented Programming")
]
library BasTypeLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(9F0FD3A4-6DC8-4F5E-A56E-1935D49EE840),
		helpstring("Iterator Class")
	]
	coclass Iterator
	{
		[default] interface IIterator;
	};
	[
		uuid(B4C78A36-6E54-4E66-A1E9-776E6BA8FB80),
		helpstring("List Class")
	]
	coclass List
	{
		[default] interface IList;
	};
	[
		uuid(B0361D48-3618-4267-9FA5-90FF3849E5A2),
		helpstring("Vector Class")
	]
	coclass Vector
	{
		[default] interface IVector;
	};
};
